#!/bin/bash

echo ''
echo 'The JCELL® is a part of JBioSystem® project for solutions and tools in the life science data analysis'
echo 'Docker container'

function check_data {
		echo ''
		echo 'Put single cell data into --> ' $(pwd)/projects/$(date +'%d-%m-%Y')'_'$name/data 
		echo 'If you done it, push ENTER'
		read enter
		
		fast=$(pwd)/projects/$project/data/*
	
for i in $fast;
do
		r+=$i
		path_data=$i
done; 		
		
if      [[ $r == *".csv"* ]]
then

        echo 'Data complete'
		
else
        echo 'Data not found'
		echo 'Put data'
		check_data
fi

	
		
}






function analysis {

echo ''
echo 'Select type of single cell analysis'
echo ''


PS3="Select: "

select opt in cell_interactome cell_markers gene_relation complete_analysis back; do

  case $opt in
    cell_interactome)
     
	INFASTP=$(pwd)/projects/*

	echo ''
	echo 'Select project:'
	echo ''
	
	select d in $INFASTP; do test -n "$d" && break; echo ">>> Invalid Selection"; done
	cd $d
	source config
	name=$name
	species=$species
	project=$project
	cd ..
	cd ..
	
	cp $(pwd)/projects/$project/parameters.yml $(pwd)/pipeline/conf/base/parameters.yml
	cp $(pwd)/projects/$project/catalog.yml $(pwd)/pipeline/conf/base/catalog.yml
	cp $(pwd)/projects/$project/data/*.csv $(pwd)/pipeline/data/data/
	
	cp $(pwd)/conf_files/raport_interactome.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_relation.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_summary.pymd $(pwd)/projects/$project/
	

	cd pipeline
	
	kedro run --pipeline na
	
	cd ..
	cd $(pwd)/projects/$project/
	
	export JUPYTER_ALLOW_INSECURE_WRITES=true
	knitpy raport_interactome.pymd
	
	rm -rf raport_interactome_files/

	
	cd ..
	cd ..
	
	mv $(pwd)/pipeline/data/plots/*.png $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.xlsx $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.csv $(pwd)/projects/$project/results/

	rm $(pwd)/pipeline/conf/base/parameters.yml
	rm $(pwd)/pipeline/conf/base/catalog.yml
	rm $(pwd)/pipeline/data/data/*.csv
	rm $(pwd)/pipeline/data/data/*.xlsx

	
	
	 
      ;;
    cell_markers)
      
	INFASTP=$(pwd)/projects/*

	echo ''
	echo 'Select project:'
	echo ''
	
	select d in $INFASTP; do test -n "$d" && break; echo ">>> Invalid Selection"; done
	cd $d
	source config
	name=$name
	species=$species
	project=$project
	cd ..
	cd ..
	
	cp $(pwd)/projects/$project/parameters.yml $(pwd)/pipeline/conf/base/parameters.yml
	cp $(pwd)/projects/$project/catalog.yml $(pwd)/pipeline/conf/base/catalog.yml
	cp $(pwd)/projects/$project/data/*.csv $(pwd)/pipeline/data/data/
	
	cp $(pwd)/conf_files/raport_interactome.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_relation.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_summary.pymd $(pwd)/projects/$project/

	cd pipeline
	
	kedro run --pipeline ms

	
	
	cd ..
	
	mv $(pwd)/pipeline/data/plots/*.png $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.xlsx $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.csv $(pwd)/projects/$project/results/

	rm $(pwd)/pipeline/conf/base/parameters.yml
	rm $(pwd)/pipeline/conf/base/catalog.yml
	rm $(pwd)/pipeline/data/data/*.csv
	rm $(pwd)/pipeline/data/data/*.xlsx
	

	  ;;
    gene_relation)
      
	 INFASTP=$(pwd)/projects/*

	echo ''
	echo 'Select project:'
	echo ''
	
	select d in $INFASTP; do test -n "$d" && break; echo ">>> Invalid Selection"; done
	cd $d
	source config
	name=$name
	species=$species
	project=$project
	cd ..
	cd ..
	
	cp $(pwd)/projects/$project/parameters.yml $(pwd)/pipeline/conf/base/parameters.yml
	cp $(pwd)/projects/$project/catalog.yml $(pwd)/pipeline/conf/base/catalog.yml
	cp $(pwd)/projects/$project/data/*.csv $(pwd)/pipeline/data/data/
	
	cp $(pwd)/conf_files/raport_interactome.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_relation.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_summary.pymd $(pwd)/projects/$project/

	cd pipeline
	
	kedro run --pipeline ms
	kedro run --pipeline gr

	cd ..
	cd $(pwd)/projects/$project/
	
	export JUPYTER_ALLOW_INSECURE_WRITES=true
	knitpy raport_relation.pymd
	
	rm -rf raport_relation_files/

	
	cd ..
	cd ..
	
	mv $(pwd)/pipeline/data/plots/*.png $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.xlsx $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.csv $(pwd)/projects/$project/results/

	rm $(pwd)/pipeline/conf/base/parameters.yml
	rm $(pwd)/pipeline/conf/base/catalog.yml
	rm $(pwd)/pipeline/data/data/*.csv
	rm $(pwd)/pipeline/data/data/*.xlsx
	

	 
	  ;;
    complete_analysis)
      
	 INFASTP=$(pwd)/projects/*

	echo ''
	echo 'Select project:'
	echo ''
	
	select d in $INFASTP; do test -n "$d" && break; echo ">>> Invalid Selection"; done
	cd $d
	source config
	name=$name
	species=$species
	project=$project
	cd ..
	cd ..
	
	cp $(pwd)/projects/$project/parameters.yml $(pwd)/pipeline/conf/base/parameters.yml
	cp $(pwd)/projects/$project/catalog.yml $(pwd)/pipeline/conf/base/catalog.yml
	cp $(pwd)/projects/$project/data/*.csv $(pwd)/pipeline/data/data/
	
	cp $(pwd)/conf_files/raport_interactome.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_relation.pymd $(pwd)/projects/$project/
	cp $(pwd)/conf_files/raport_summary.pymd $(pwd)/projects/$project/
	

	cd pipeline
	
	kedro run --pipeline na
	kedro run --pipeline ms
	kedro run --pipeline gr
	kedro run --pipeline cb

	cd ..
	cd $(pwd)/projects/$project/
	
	export JUPYTER_ALLOW_INSECURE_WRITES=true
	knitpy raport_summary.pymd
	
	rm -rf raport_summary_files/
	
	cd ..	
	cd ..
	
	mv $(pwd)/pipeline/data/plots/*.png $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.xlsx $(pwd)/projects/$project/results/
	mv $(pwd)/pipeline/data/tables/*.csv $(pwd)/projects/$project/results/

	rm $(pwd)/pipeline/conf/base/parameters.yml
	rm $(pwd)/pipeline/conf/base/catalog.yml
	rm $(pwd)/pipeline/data/data/*.csv
	rm $(pwd)/pipeline/data/data/*.xlsx
	

	 
      ;;
	  
    back)
	
      project_create
	  
      ;;
    *) 
      echo "Invalid option $REPLY"
      ;;
  esac
done

}






function input {	
	echo 'Write species [mice | human | mix | custom]'
	read species
	species=$(echo $species | tr '[:upper:]' '[:lower:]')
	
	if [[ $species == 'mice' ]] || [[ $species == 'human' ]] || [[ $species == 'mix' ]] || [[ $species == 'custom' ]]
	then
		echo ''
		echo 'Species correct'
		echo ''
		
	else 
		
		input
	fi
	
}
	
function gen {

	echo 'Dou you want genes relation analysis? [Y/N]'
	read decision
	decision=$(echo $decision | tr '[:upper:]' '[:lower:]')	
	
	if [[ $decision == 'y' ]]
	then
		
		echo 'Write gene or genes set for analysis'
		echo 'Genes slould be written after coma like --> [KIT, PAX3, EDNRB]'
		echo 'Genes:'
		read gen_set
		gen_set=$(echo $gen_set | tr '[:lower:]' '[:upper:]')	
		
	elif [[ $decision == 'n' ]]
	then
		gen_set=0
	
	else 
	
		gen
fi

}

function project_fun {

echo ''
echo 'Select operation'
echo ''

PS3="Select: "

select opt in project_create analysis quit_docker; do

  case $opt in
    project_create)
	
	
	echo 'Write project name'
	read name
	name=$(echo $name | tr '[:upper:]' '[:lower:]')	
	project=$(date +'%d-%m-%Y')'_'$name
	
	input
	
	gen
		
	mkdir -p $(pwd)/projects/$project
	mkdir -p $(pwd)/projects/$project/results
	mkdir -p $(pwd)/projects/$project/data
	echo name=$name > $(pwd)/projects/$project/config
	echo species=$species >> $(pwd)/projects/$project/config	
	echo project=$project >> $(pwd)/projects/$project/config
	echo gen_set=$gen_set >> $(pwd)/projects/$project/config
	
	
	check_data
	
	echo -e 'cell_data:\n  type: pandas.CSVDataSet\n  filepath: data/data/'$(basename $path_data) > $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'results_interaction:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/cell_interaction.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'results_relation:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/relation_results.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'final_results:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/network_results.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'dfr:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/cell_interaction.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'relation_results:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/relation_results.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'cell_markers:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/cell_markers.xlsx' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	echo -e 'df_summary:\n  type: pandas.ExcelDataSet\n  filepath: data/tables/combine_results.csv' >> $(pwd)/projects/$project/catalog.yml	
	echo '' >> $(pwd)/projects/$project/catalog.yml
	
	if [[ $species == 'mice' ]]
	then
	
	echo -e 'interaction_data:\n  type: pandas.CSVDataSet\n  filepath: data/database/mice.csv' >> $(pwd)/projects/$project/catalog.yml	
	
	elif [[ $species == 'human' ]]
	then
	
	echo -e 'interaction_data:\n  type: pandas.CSVDataSet\n  filepath: data/database/human.csv' >> $(pwd)/projects/$project/catalog.yml
	
	elif [[ $species == 'mix' ]]
	then

	echo -e 'interaction_data:\n  type: pandas.CSVDataSet\n  filepath: data/database/mix.csv' >> $(pwd)/projects/$project/catalog.yml
	
	elif [[ $species == 'custom' ]]
	then

	echo -e 'interaction_data:\n  type: pandas.CSVDataSet\n  filepath: data/database/custom.csv' >> $(pwd)/projects/$project/catalog.yml
fi	

	cp $(pwd)/conf_files/parameters.yml $(pwd)/projects/$project/parameters.yml
	echo -e '' >> $(pwd)/projects/$project/parameters.yml
	echo -e '#Set of genes for relations analysis' >> $(pwd)/projects/$project/parameters.yml
	echo -e 'gen_set: '$gen_set >> $(pwd)/projects/$project/parameters.yml
	
	
	echo ''
	echo 'Go to -->' $(pwd)/projects/$project/parameters.yml 'and set parameters for ML models'
	echo 'Parameters depends only on your ideas. Warrning! More pameters demand longer time for analysis...'
	echo ''
	
	project_fun
	
	
      ;;
    analysis)
     
	analysis
	

	  
      ;;
    quit_docker)
    
	
	 
 

	
	exit 
	

	
      ;;
    *) 
      echo "Invalid option $REPLY"
      ;;
  esac
done


}



project_fun

